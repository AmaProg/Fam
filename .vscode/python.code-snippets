{
	// Place your Fam workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"property":{
		"scope": "python",
		"prefix": "prop",
		"body": [
			"@property",
			"def $1(self) -> $2:",
			"\treturn self._$1"
		]
	},
	"prop set":{
		"scope": "python",
		"prefix": "propset",
		"body": [
			"@property",
			"def $1(self) -> $2:",
			"\treturn self._$1\n",
			"@$1.setter",
			"def $1(self, value: $2):",
			"\tself._$1 = value"
		]
	},
	"attribut":{
		"scope": "python",
		"prefix": "att",
		"body": [
			"self._$1: $2"
		]
	},
	"define function":{
		"scope": "python",
		"prefix": "defpass",
		"body": [
			"def $1() -> None:",
			"\tpass"
		]
	},

	"define function for class":{
		"scope": "python",
		"prefix": "defself",
		"body": [
			"def $1(self) -> None:",
			"\tpass"
		]
	},
	"define function test":{
		"scope": "python",
		"prefix": "deftest",
		"body": [
			"def test_$1():",
			"\t$2"
		]
	},

}