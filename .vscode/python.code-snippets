{
	// Place your Fam workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"property":{
		"scope": "python",
		"prefix": "prop",
		"body": [
			"@property",
			"def $1(self) -> $2:",
			"\treturn self._$1"
		]
	},
	"prop set":{
		"scope": "python",
		"prefix": "propset",
		"body": [
			"@property",
			"def $1(self) -> $2:",
			"\treturn self._$1\n",
			"@$1.setter",
			"def $1(self, value: $2):",
			"\tself._$1 = value"
		]
	},
	"attribut":{
		"scope": "python",
		"prefix": "att",
		"body": [
			"self._$1: $2"
		]
	},
	"define function":{
		"scope": "python",
		"prefix": "defpass",
		"body": [
			"def $1() -> None:",
			"\tpass"
		]
	},

	"define function for class":{
		"scope": "python",
		"prefix": "defself",
		"body": [
			"def $1(self) -> None:",
			"\tpass"
		]
	},
	"define function test":{
		"scope": "python",
		"prefix": "deftest",
		"body": [
			"def test_$1():",
			"\t$2"
		]
	},
	"typer app command":{
		"scope": "python",
		"prefix": "appcom",
		"body": [
			"@app.command()",
			"def $1():",
			"\tpass"
		]
	},
	"typer option":{
		"scope": "python",
		"prefix": "typeropt",
		"body": [
			"$1: Annotated[$2, typer.Option('--$1', '-v$3', help='')] = $4,",
		]
	},
	"try exception": {
		"scope": "python",
		"prefix": "try except",
		"body": [
			
			"try:",
			"\t$1",
			"except:",
			"\tpass",
			
		],
		"description": "Try with exception handling for table"
	},

	"main if": {
		"scope": "python",
		"prefix": "mainif",
		"body": [
			"if __name__ == '__main__':",
			"\t$1"
			
		],
		"description": "Create a if main == __name__"
	},
	"Attribut for db": {
		"scope": "python",
		"prefix": "sqlattdb",
		"body": [
			"$1: Mapped[$2] = mapped_column(nullable=$3)",

			
		],
		"description": "Create property for db class"
	},
	"relation db": {
		"scope": "python",
		"prefix": "sqlattrel",
		"body": [
			"$1: Mapped['$2'] = relationship('$2',cascade='all, delete-orphan')",

			
		],
		"description": "Create property for db class"
	},
	"relation key db": {
		"scope": "python",
		"prefix": "sqlattkey",
		"body": [
			"$1: Mapped[$2] = mapped_column(ForeignKey('$1', ondelete='CASCADE'),nullable=$3,)",

			
		],
		"description": "Create property for db class"
	},
	"Typer Command": {
		"scope": "python",
		"prefix": "newcom",
		"body": [
			"from typing_extensions import Annotated",
			"from typing import Any",
			"import typer",
			"from typer import Typer\n",

			"app = Typer(help='$1')\n",
			"$2_command: dict[str, Any] = {'app': app, 'name': '$2'}",

			
		],
		"description": "Create property for db class"
	},


} 